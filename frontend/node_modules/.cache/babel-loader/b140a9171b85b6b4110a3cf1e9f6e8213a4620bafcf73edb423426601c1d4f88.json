{"ast":null,"code":"var _jsxFileName = \"F:\\\\training-tracker-system\\\\frontend\\\\src\\\\components\\\\tracking\\\\CompletionForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate, Link, useLocation } from 'react-router-dom';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport trackingService from '../../services/trackingService';\nimport employeeService from '../../services/employeeService';\nimport trainingService from '../../services/trainingService';\nimport './Tracking.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CompletionForm = () => {\n  _s();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const queryParams = new URLSearchParams(location.search);\n  const enrollmentId = queryParams.get('enrollmentId');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [employees, setEmployees] = useState([]);\n  const [programs, setPrograms] = useState([]);\n  const [enrollment, setEnrollment] = useState(null);\n  const initialValues = {\n    employeeId: '',\n    programId: '',\n    employeeName: '',\n    programName: '',\n    completionDate: new Date().toISOString().slice(0, 19),\n    score: 0,\n    status: 'COMPLETE',\n    certificateUrl: '',\n    completedBy: 'Admin' // Default value, could be replaced with logged in user\n  };\n\n  // Validation schema\n  const validationSchema = Yup.object({\n    employeeId: Yup.string().required('Employee is required'),\n    programId: Yup.string().required('Program is required'),\n    completionDate: Yup.date().required('Completion date is required'),\n    score: Yup.number().min(0, 'Score must be at least 0').max(100, 'Score cannot exceed 100').required('Score is required'),\n    status: Yup.string().required('Status is required'),\n    completedBy: Yup.string().required('Completed by is required')\n  });\n  useEffect(() => {\n    fetchEmployeesAndPrograms();\n    if (enrollmentId) {\n      fetchEnrollmentDetails(enrollmentId);\n    }\n  }, [enrollmentId]);\n  const fetchEmployeesAndPrograms = async () => {\n    try {\n      setLoading(true);\n\n      // Fetch employees\n      const employeesResponse = await employeeService.getAllEmployees();\n      setEmployees(employeesResponse.data);\n\n      // Fetch programs\n      const programsResponse = await trainingService.getAllPrograms();\n      setPrograms(programsResponse.data);\n      setLoading(false);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n      setError('Failed to load employees or programs. Please try again.');\n      setLoading(false);\n    }\n  };\n  const fetchEnrollmentDetails = async id => {\n    try {\n      // This is a mock implementation since we don't have a direct API to get enrollment by ID\n      // In a real implementation, you would have an endpoint to get enrollment by ID\n      const employeesResponse = await employeeService.getAllEmployees();\n      for (const employee of employeesResponse.data) {\n        try {\n          const enrollmentsResponse = await employeeService.getEnrollmentsByEmployee(employee.id);\n          const foundEnrollment = enrollmentsResponse.data.find(e => e.id === parseInt(id));\n          if (foundEnrollment) {\n            setEnrollment({\n              ...foundEnrollment,\n              employeeName: `${employee.firstName} ${employee.lastName}`,\n              employeeId: employee.id\n            });\n\n            // Set initial values based on enrollment\n            initialValues.employeeId = employee.id.toString();\n            initialValues.programId = foundEnrollment.programId.toString();\n            initialValues.employeeName = `${employee.firstName} ${employee.lastName}`;\n            initialValues.programName = foundEnrollment.programName;\n            break;\n          }\n        } catch (error) {\n          console.error(`Error fetching enrollments for employee ${employee.id}:`, error);\n        }\n      }\n    } catch (error) {\n      console.error('Error fetching enrollment details:', error);\n      setError('Failed to load enrollment details. Please try again.');\n    }\n  };\n  const handleSubmit = async (values, {\n    setSubmitting\n  }) => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // If not set already, get employee and program names\n      if (!values.employeeName || !values.programName) {\n        const employee = employees.find(e => e.id === parseInt(values.employeeId));\n        const program = programs.find(p => p.id === parseInt(values.programId));\n        if (employee) {\n          values.employeeName = `${employee.firstName} ${employee.lastName}`;\n        }\n        if (program) {\n          values.programName = program.name;\n        }\n      }\n\n      // Record completion\n      await trackingService.recordCompletion(values);\n\n      // If this completion came from an enrollment, update the enrollment status\n      if (enrollmentId) {\n        await employeeService.updateEnrollmentStatus(enrollmentId, {\n          status: 'COMPLETED'\n        });\n      }\n      setLoading(false);\n\n      // Show success message and navigate back\n      alert('Program completion recorded successfully!');\n      navigate('/completions');\n    } catch (error) {\n      console.error('Error recording completion:', error);\n      setError('Failed to record completion. Please try again.');\n      setLoading(false);\n      setSubmitting(false);\n    }\n  };\n  if (loading && (!employees.length || !programs.length)) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading form data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"completion-form-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"page-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Record Program Completion\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card\",\n      children: /*#__PURE__*/_jsxDEV(Formik, {\n        initialValues: enrollment ? {\n          employeeId: enrollment.employeeId.toString(),\n          programId: enrollment.programId.toString(),\n          employeeName: enrollment.employeeName,\n          programName: enrollment.programName,\n          completionDate: new Date().toISOString().slice(0, 10),\n          score: 0,\n          status: 'COMPLETE',\n          certificateUrl: '',\n          completedBy: 'Admin'\n        } : initialValues,\n        validationSchema: validationSchema,\n        onSubmit: handleSubmit,\n        enableReinitialize: true,\n        children: ({\n          isSubmitting,\n          dirty,\n          isValid,\n          values,\n          setFieldValue\n        }) => /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-row\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"employeeId\",\n                children: \"Employee\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 184,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Field, {\n                as: \"select\",\n                id: \"employeeId\",\n                name: \"employeeId\",\n                className: \"form-control\",\n                disabled: enrollmentId !== null,\n                onChange: e => {\n                  setFieldValue('employeeId', e.target.value);\n                  const employee = employees.find(emp => emp.id === parseInt(e.target.value));\n                  if (employee) {\n                    setFieldValue('employeeName', `${employee.firstName} ${employee.lastName}`);\n                  }\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"\",\n                  children: \"Select an employee\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 199,\n                  columnNumber: 21\n                }, this), employees.map(employee => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: employee.id,\n                  children: [employee.firstName, \" \", employee.lastName, \" (\", employee.employeeId, \")\"]\n                }, employee.id, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 201,\n                  columnNumber: 23\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 185,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                name: \"employeeId\",\n                component: \"div\",\n                className: \"form-error\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 206,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"programId\",\n                children: \"Training Program\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 210,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Field, {\n                as: \"select\",\n                id: \"programId\",\n                name: \"programId\",\n                className: \"form-control\",\n                disabled: enrollmentId !== null,\n                onChange: e => {\n                  setFieldValue('programId', e.target.value);\n                  const program = programs.find(prog => prog.id === parseInt(e.target.value));\n                  if (program) {\n                    setFieldValue('programName', program.name);\n                  }\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"\",\n                  children: \"Select a training program\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 225,\n                  columnNumber: 21\n                }, this), programs.map(program => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: program.id,\n                  children: [program.name, \" (\", program.category, \")\"]\n                }, program.id, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 227,\n                  columnNumber: 23\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 211,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                name: \"programId\",\n                component: \"div\",\n                className: \"form-error\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 232,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 209,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-row\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"completionDate\",\n                children: \"Completion Date\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 238,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Field, {\n                type: \"date\",\n                id: \"completionDate\",\n                name: \"completionDate\",\n                className: \"form-control\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 239,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                name: \"completionDate\",\n                component: \"div\",\n                className: \"form-error\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 245,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 237,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"score\",\n                children: \"Score (%)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 249,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Field, {\n                type: \"number\",\n                id: \"score\",\n                name: \"score\",\n                className: \"form-control\",\n                min: \"0\",\n                max: \"100\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 250,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                name: \"score\",\n                component: \"div\",\n                className: \"form-error\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 258,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 248,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-row\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"status\",\n                children: \"Status\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 264,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Field, {\n                as: \"select\",\n                id: \"status\",\n                name: \"status\",\n                className: \"form-control\",\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"COMPLETE\",\n                  children: \"Complete\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 271,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"PARTIAL\",\n                  children: \"Partial\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 272,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"FAILED\",\n                  children: \"Failed\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 273,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 265,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                name: \"status\",\n                component: \"div\",\n                className: \"form-error\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 275,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 263,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"completedBy\",\n                children: \"Completed By\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 279,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Field, {\n                type: \"text\",\n                id: \"completedBy\",\n                name: \"completedBy\",\n                className: \"form-control\",\n                placeholder: \"Enter your name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 280,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                name: \"completedBy\",\n                component: \"div\",\n                className: \"form-error\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 287,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 278,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"certificateUrl\",\n              children: \"Certificate URL (Optional)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 292,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Field, {\n              type: \"text\",\n              id: \"certificateUrl\",\n              name: \"certificateUrl\",\n              className: \"form-control\",\n              placeholder: \"Enter URL to certificate\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 293,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n              name: \"certificateUrl\",\n              component: \"div\",\n              className: \"form-error\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 300,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-actions\",\n            children: [/*#__PURE__*/_jsxDEV(Link, {\n              to: \"/completions\",\n              className: \"btn btn-secondary\",\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 304,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              className: \"btn btn-primary\",\n              disabled: isSubmitting || !isValid,\n              children: isSubmitting ? 'Recording...' : 'Record Completion'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 307,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 5\n  }, this);\n};\n_s(CompletionForm, \"TxmP2eDLfwl2xLZiFjTlFhQG8Zo=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = CompletionForm;\nexport default CompletionForm;\nvar _c;\n$RefreshReg$(_c, \"CompletionForm\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","Link","useLocation","Formik","Form","Field","ErrorMessage","Yup","trackingService","employeeService","trainingService","jsxDEV","_jsxDEV","CompletionForm","_s","navigate","location","queryParams","URLSearchParams","search","enrollmentId","get","loading","setLoading","error","setError","employees","setEmployees","programs","setPrograms","enrollment","setEnrollment","initialValues","employeeId","programId","employeeName","programName","completionDate","Date","toISOString","slice","score","status","certificateUrl","completedBy","validationSchema","object","string","required","date","number","min","max","fetchEmployeesAndPrograms","fetchEnrollmentDetails","employeesResponse","getAllEmployees","data","programsResponse","getAllPrograms","console","id","employee","enrollmentsResponse","getEnrollmentsByEmployee","foundEnrollment","find","e","parseInt","firstName","lastName","toString","handleSubmit","values","setSubmitting","program","p","name","recordCompletion","updateEnrollmentStatus","alert","length","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","enableReinitialize","isSubmitting","dirty","isValid","setFieldValue","htmlFor","as","disabled","onChange","target","value","emp","map","component","prog","category","type","placeholder","to","_c","$RefreshReg$"],"sources":["F:/training-tracker-system/frontend/src/components/tracking/CompletionForm.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate, Link, useLocation } from 'react-router-dom';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport trackingService from '../../services/trackingService';\nimport employeeService from '../../services/employeeService';\nimport trainingService from '../../services/trainingService';\nimport './Tracking.css';\n\nconst CompletionForm = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const queryParams = new URLSearchParams(location.search);\n  const enrollmentId = queryParams.get('enrollmentId');\n  \n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [employees, setEmployees] = useState([]);\n  const [programs, setPrograms] = useState([]);\n  const [enrollment, setEnrollment] = useState(null);\n  \n  const initialValues = {\n    employeeId: '',\n    programId: '',\n    employeeName: '',\n    programName: '',\n    completionDate: new Date().toISOString().slice(0, 19),\n    score: 0,\n    status: 'COMPLETE',\n    certificateUrl: '',\n    completedBy: 'Admin' // Default value, could be replaced with logged in user\n  };\n\n  // Validation schema\n  const validationSchema = Yup.object({\n    employeeId: Yup.string().required('Employee is required'),\n    programId: Yup.string().required('Program is required'),\n    completionDate: Yup.date().required('Completion date is required'),\n    score: Yup.number()\n      .min(0, 'Score must be at least 0')\n      .max(100, 'Score cannot exceed 100')\n      .required('Score is required'),\n    status: Yup.string().required('Status is required'),\n    completedBy: Yup.string().required('Completed by is required')\n  });\n\n  useEffect(() => {\n    fetchEmployeesAndPrograms();\n    \n    if (enrollmentId) {\n      fetchEnrollmentDetails(enrollmentId);\n    }\n  }, [enrollmentId]);\n\n  const fetchEmployeesAndPrograms = async () => {\n    try {\n      setLoading(true);\n      \n      // Fetch employees\n      const employeesResponse = await employeeService.getAllEmployees();\n      setEmployees(employeesResponse.data);\n      \n      // Fetch programs\n      const programsResponse = await trainingService.getAllPrograms();\n      setPrograms(programsResponse.data);\n      \n      setLoading(false);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n      setError('Failed to load employees or programs. Please try again.');\n      setLoading(false);\n    }\n  };\n\n  const fetchEnrollmentDetails = async (id) => {\n    try {\n      // This is a mock implementation since we don't have a direct API to get enrollment by ID\n      // In a real implementation, you would have an endpoint to get enrollment by ID\n      const employeesResponse = await employeeService.getAllEmployees();\n      \n      for (const employee of employeesResponse.data) {\n        try {\n          const enrollmentsResponse = await employeeService.getEnrollmentsByEmployee(employee.id);\n          const foundEnrollment = enrollmentsResponse.data.find(e => e.id === parseInt(id));\n          \n          if (foundEnrollment) {\n            setEnrollment({\n              ...foundEnrollment,\n              employeeName: `${employee.firstName} ${employee.lastName}`,\n              employeeId: employee.id\n            });\n            \n            // Set initial values based on enrollment\n            initialValues.employeeId = employee.id.toString();\n            initialValues.programId = foundEnrollment.programId.toString();\n            initialValues.employeeName = `${employee.firstName} ${employee.lastName}`;\n            initialValues.programName = foundEnrollment.programName;\n            \n            break;\n          }\n        } catch (error) {\n          console.error(`Error fetching enrollments for employee ${employee.id}:`, error);\n        }\n      }\n    } catch (error) {\n      console.error('Error fetching enrollment details:', error);\n      setError('Failed to load enrollment details. Please try again.');\n    }\n  };\n\n  const handleSubmit = async (values, { setSubmitting }) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      // If not set already, get employee and program names\n      if (!values.employeeName || !values.programName) {\n        const employee = employees.find(e => e.id === parseInt(values.employeeId));\n        const program = programs.find(p => p.id === parseInt(values.programId));\n        \n        if (employee) {\n          values.employeeName = `${employee.firstName} ${employee.lastName}`;\n        }\n        \n        if (program) {\n          values.programName = program.name;\n        }\n      }\n      \n      // Record completion\n      await trackingService.recordCompletion(values);\n      \n      // If this completion came from an enrollment, update the enrollment status\n      if (enrollmentId) {\n        await employeeService.updateEnrollmentStatus(enrollmentId, { status: 'COMPLETED' });\n      }\n      \n      setLoading(false);\n      \n      // Show success message and navigate back\n      alert('Program completion recorded successfully!');\n      navigate('/completions');\n    } catch (error) {\n      console.error('Error recording completion:', error);\n      setError('Failed to record completion. Please try again.');\n      setLoading(false);\n      setSubmitting(false);\n    }\n  };\n\n  if (loading && (!employees.length || !programs.length)) {\n    return <div className=\"loading\">Loading form data...</div>;\n  }\n\n  return (\n    <div className=\"completion-form-container\">\n      <div className=\"page-header\">\n        <h1>Record Program Completion</h1>\n      </div>\n\n      {error && <div className=\"error-message\">{error}</div>}\n\n      <div className=\"card\">\n        <Formik\n          initialValues={enrollment ? {\n            employeeId: enrollment.employeeId.toString(),\n            programId: enrollment.programId.toString(),\n            employeeName: enrollment.employeeName,\n            programName: enrollment.programName,\n            completionDate: new Date().toISOString().slice(0, 10),\n            score: 0,\n            status: 'COMPLETE',\n            certificateUrl: '',\n            completedBy: 'Admin'\n          } : initialValues}\n          validationSchema={validationSchema}\n          onSubmit={handleSubmit}\n          enableReinitialize={true}\n        >\n          {({ isSubmitting, dirty, isValid, values, setFieldValue }) => (\n            <Form>\n              <div className=\"form-row\">\n                <div className=\"form-group\">\n                  <label htmlFor=\"employeeId\">Employee</label>\n                  <Field \n                    as=\"select\"\n                    id=\"employeeId\" \n                    name=\"employeeId\" \n                    className=\"form-control\"\n                    disabled={enrollmentId !== null}\n                    onChange={(e) => {\n                      setFieldValue('employeeId', e.target.value);\n                      const employee = employees.find(emp => emp.id === parseInt(e.target.value));\n                      if (employee) {\n                        setFieldValue('employeeName', `${employee.firstName} ${employee.lastName}`);\n                      }\n                    }}\n                  >\n                    <option value=\"\">Select an employee</option>\n                    {employees.map(employee => (\n                      <option key={employee.id} value={employee.id}>\n                        {employee.firstName} {employee.lastName} ({employee.employeeId})\n                      </option>\n                    ))}\n                  </Field>\n                  <ErrorMessage name=\"employeeId\" component=\"div\" className=\"form-error\" />\n                </div>\n\n                <div className=\"form-group\">\n                  <label htmlFor=\"programId\">Training Program</label>\n                  <Field \n                    as=\"select\"\n                    id=\"programId\" \n                    name=\"programId\" \n                    className=\"form-control\"\n                    disabled={enrollmentId !== null}\n                    onChange={(e) => {\n                      setFieldValue('programId', e.target.value);\n                      const program = programs.find(prog => prog.id === parseInt(e.target.value));\n                      if (program) {\n                        setFieldValue('programName', program.name);\n                      }\n                    }}\n                  >\n                    <option value=\"\">Select a training program</option>\n                    {programs.map(program => (\n                      <option key={program.id} value={program.id}>\n                        {program.name} ({program.category})\n                      </option>\n                    ))}\n                  </Field>\n                  <ErrorMessage name=\"programId\" component=\"div\" className=\"form-error\" />\n                </div>\n              </div>\n\n              <div className=\"form-row\">\n                <div className=\"form-group\">\n                  <label htmlFor=\"completionDate\">Completion Date</label>\n                  <Field \n                    type=\"date\" \n                    id=\"completionDate\" \n                    name=\"completionDate\" \n                    className=\"form-control\" \n                  />\n                  <ErrorMessage name=\"completionDate\" component=\"div\" className=\"form-error\" />\n                </div>\n\n                <div className=\"form-group\">\n                  <label htmlFor=\"score\">Score (%)</label>\n                  <Field \n                    type=\"number\" \n                    id=\"score\" \n                    name=\"score\" \n                    className=\"form-control\" \n                    min=\"0\"\n                    max=\"100\"\n                  />\n                  <ErrorMessage name=\"score\" component=\"div\" className=\"form-error\" />\n                </div>\n              </div>\n\n              <div className=\"form-row\">\n                <div className=\"form-group\">\n                  <label htmlFor=\"status\">Status</label>\n                  <Field \n                    as=\"select\"\n                    id=\"status\" \n                    name=\"status\" \n                    className=\"form-control\"\n                  >\n                    <option value=\"COMPLETE\">Complete</option>\n                    <option value=\"PARTIAL\">Partial</option>\n                    <option value=\"FAILED\">Failed</option>\n                  </Field>\n                  <ErrorMessage name=\"status\" component=\"div\" className=\"form-error\" />\n                </div>\n\n                <div className=\"form-group\">\n                  <label htmlFor=\"completedBy\">Completed By</label>\n                  <Field \n                    type=\"text\" \n                    id=\"completedBy\" \n                    name=\"completedBy\" \n                    className=\"form-control\" \n                    placeholder=\"Enter your name\" \n                  />\n                  <ErrorMessage name=\"completedBy\" component=\"div\" className=\"form-error\" />\n                </div>\n              </div>\n\n              <div className=\"form-group\">\n                <label htmlFor=\"certificateUrl\">Certificate URL (Optional)</label>\n                <Field \n                  type=\"text\" \n                  id=\"certificateUrl\" \n                  name=\"certificateUrl\" \n                  className=\"form-control\" \n                  placeholder=\"Enter URL to certificate\" \n                />\n                <ErrorMessage name=\"certificateUrl\" component=\"div\" className=\"form-error\" />\n              </div>\n\n              <div className=\"form-actions\">\n                <Link to=\"/completions\" className=\"btn btn-secondary\">\n                  Cancel\n                </Link>\n                <button \n                  type=\"submit\" \n                  className=\"btn btn-primary\" \n                  disabled={isSubmitting || !(isValid)}\n                >\n                  {isSubmitting ? 'Recording...' : 'Record Completion'}\n                </button>\n              </div>\n            </Form>\n          )}\n        </Formik>\n      </div>\n    </div>\n  );\n};\n\nexport default CompletionForm;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}